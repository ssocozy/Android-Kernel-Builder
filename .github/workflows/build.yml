name: "Build kernels"

env:
  OUT_DIR: "out"

on:
  workflow_dispatch:
    inputs:
      kernelSourceURL:
        description: "Custom kernel source URL"
        required: true
        type: string
        default: "https://github.com/KDEFFALT/kernel_msm-5.15"
      kernelPrivateSource:
        description: "is private source?"
        required: false
        type: boolean
        default: false
      kernelBranch:
        description: "kernel branch (default if empty)"
        required: false
        type: string
        default: "main"
      kernelSourceName:
        description: "Kernel source name"
        required: true
        type: string
        default: "kernel_msm-5.15"
      localVersion:
        description: "Custom localversion name (e.g., -mybuild)"
        required: false
        type: string
        default: ""
      kernelSUChoice:
        description: "Choose KernelSU version"
        required: true
        default: "KernelSU"
        type: choice
        options:
          - "None"
          - "KernelSU"
          - "KernelSU-Next"
          - "KernelSU-Next + Next-SuSFS"
          - "KernelSU by @rsuntk"
      withKernelSUSFS:
        description: "Enable SUSFS"
        required: false
        type: boolean
        default: false
      susfsBranch:
        description: "SUSFS branch to use"
        required: false
        type: string
        default: "gki-android13-5.15"
      clangCompiler:
        description: "Clang compiler to use"
        required: false
        default: "ZyC Clang"
        type: choice
        options:
          - "ZyC Clang"
          - "Greenforce Clang"
          - "SuperRyzen Clang"
          - "WeebX Clang"

jobs:
  Set-repos:
    name: "üêÇ Parse repository"
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ steps.generate-matrix.outputs.repos }}
    steps:
      - name: "üòÑ Checkout"
        uses: actions/checkout@v4

      - name: "üòÜ Generate Matrix"
        id: generate-matrix
        run: |
          repos=$(cat repos.json)
          if [ $? -ne 0 ] || ! echo "$repos" | jq . >/dev/null 2>&1; then
            echo "Error: repos.json is missing or invalid"
            exit 1
          fi
          echo "repos<<EOF" >> $GITHUB_OUTPUT
          echo "$repos" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  Build-Kernel:
    name: "üêé Build kernel"
    runs-on: ubuntu-latest
    needs:
      - Set-repos
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        repos: ${{ fromJSON(needs.Set-repos.outputs.repos) }}
    env:
      kernelDir: ${{ matrix.repos.device }}_${{ github.event.inputs.kernelSourceName }}
      kernelName: ${{ github.event.inputs.kernelSourceName }}
      kernelRepo: ${{ github.event.inputs.kernelSourceURL }}
      kernelBranch: ${{ github.event.inputs.kernelBranch }}
      DEFCONFIG_NAME: ${{ matrix.repos.defconfig }}

    steps:
      - name: "‚ú® Create working dir"
        run: mkdir -p $kernelDir

      - name: "üïí Generate Timestamp"
        run: echo "BUILD_TIME=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV

      - name: "‚≠ê Install prerequisites"
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential bc curl flex cpio ccache rsync git zip dwarves libelf-dev ftp gcc-aarch64-linux-gnu gcc-arm-linux-gnueabi libssl-dev lftp zstd wget libfl-dev python3 libarchive-tools clang lld llvm llvm-dev

      - name: "üåü Clone kernel source => (${{ env.kernelRepo }})"
        working-directory: ./${{ env.kernelDir }}
        env:
          PRIVATE_SOURCE: ${{ github.event.inputs.kernelSourceURL }}
        run: |
          set -x
          if [ "${{ github.event.inputs.kernelPrivateSource }}" == "true" ]; then
            if [[ "$PRIVATE_SOURCE" == *"github.com"* ]]; then
              PRIVATE_SOURCE="${PRIVATE_SOURCE#https://github.com/}"
              OWNER=$(echo "$PRIVATE_SOURCE" | cut -d'/' -f1)
              REPO_PREFIX="https://$OWNER:${{ secrets.PRIVATE_REPO_TOKEN }}@github.com/"
            elif [[ "$PRIVATE_SOURCE" == *"gitlab.com"* ]]; then
              PRIVATE_SOURCE="${PRIVATE_SOURCE#https://gitlab.com/}"
              OWNER=$(echo "$PRIVATE_SOURCE" | cut -d'/' -f1)
              REPO_PREFIX="https://$OWNER:${{ secrets.PRIVATE_REPO_TOKEN }}@gitlab.com/"
            else
              echo "Unsupported repository source: $PRIVATE_SOURCE"
              exit 1
            fi
            git clone --recursive --branch ${{ github.event.inputs.kernelBranch }} "$REPO_PREFIX$PRIVATE_SOURCE" ${{ env.kernelName }} --depth=1
          else
            git clone --recursive --branch ${{ github.event.inputs.kernelBranch }} ${{ github.event.inputs.kernelSourceURL }} ${{ env.kernelName }} --depth=1
          fi

      - name: "üí´ Get Toolchains"
        run: |
          case "${{ github.event.inputs.clangCompiler }}" in
            "ZyC Clang")
              clang_url="https://github.com/ZyCromerZ/Clang/releases/download/21.0.0git-20250221-release/Clang-21.0.0git-20250221.tar.gz"
              ;;
            "Greenforce Clang")
              clang_url="https://github.com/greenforce-project/greenforce_clang/releases/download/23022025/greenforce-clang-21.0.0git-23022025.tar.gz"
              ;;
            "SuperRyzen Clang")
              clang_url="https://gitlab.com/TianWalkzzMiku/SuperRyzen-Clang/"
              ;;
            "WeebX Clang")
              clang_url="https://github.com/XSans0/WeebX-Clang/releases/download/WeebX-Clang-19.1.5-release/WeebX-Clang-19.1.5.tar.gz"
              ;;
            *)
              echo "‚ùå Unsupported Clang compiler: ${{ github.event.inputs.clangCompiler }}"
              exit 1
              ;;
          esac
          mkdir -p clang
          if [[ "$clang_url" == *.tar.gz || "$clang_url" == *.zip || "$clang_url" == *.tar.xz || "$clang_url" == *.tgz || "$clang_url" == *.rar ]]; then
            wget --progress=bar:force -O "clang/clang.tar.gz" "$clang_url" || exit 1
            tar -xf clang/clang.tar.gz -C clang || exit 1
            rm -f clang/clang.tar.gz
          else
            git clone --recursive --depth=1 "$clang_url" clang || exit 1
          fi
          if [ -d "clang/bin" ]; then
            CLANG_PATH="${{ github.workspace }}/clang/bin"
          else
            CLANG_PATH=$(find clang -type d -name "bin" | head -n 1)
            CLANG_PATH="${{ github.workspace }}/${CLANG_PATH}"
          fi
          if [ ! -f "$CLANG_PATH/clang" ]; then
            echo "‚ùå Clang binary not found in $CLANG_PATH!"
            exit 1
          fi
          echo "CLANG_PATH=$CLANG_PATH" >> $GITHUB_ENV
          echo "$CLANG_PATH" >> $GITHUB_PATH

      - name: üìê Set swap to 50G
        uses: pierotofy/set-swap-space@master
        with:
          swap-size-gb: 50

      - name: "‚ö° Tune Swap Settings"
        run: |
          echo "vm.swappiness=100" | sudo tee -a /etc/sysctl.conf
          sudo sysctl -p

      - name: "‚ö° Configure ccache"
        run: |
          echo "CCACHE_DIR=${{ github.workspace }}/.ccache" >> $GITHUB_ENV
          echo "CC='ccache clang'" >> $GITHUB_ENV
          echo "CXX='ccache clang++'" >> $GITHUB_ENV
          echo "PATH=/usr/lib/ccache:$PATH" >> $GITHUB_ENV

      - name: "üòé Set args for GKI"
        id: generate-args
        working-directory: ./${{ env.kernelDir }}
        env:
          params: "${{ toJSON(matrix.repos.params) }}"
        run: |
          ARCH=$(echo $params | jq -r ".ARCH")
          CROSS_COMPILE=$(echo $params | jq -r ".CROSS_COMPILE")
          CROSS_COMPILE_ARM32=$(echo $params | jq -r ".CROSS_COMPILE_ARM32")
          CROSS_COMPILE_COMPAT=$(echo $params | jq -r ".CROSS_COMPILE_COMPAT")
          CLANG_TRIPLE=$(echo $params | jq -r ".CLANG_TRIPLE")
          AR=$(echo $params | jq -r ".AR")
          CC=$(echo $params | jq -r ".CC")
          echo "ARCH=arm64" >> $GITHUB_ENV
          echo "LLVM=1" >> $GITHUB_ENV
          echo "LTO=thin" >> $GITHUB_ENV
          args="-j$(nproc --all)"
          if [ -n "${{ env.OUT_DIR }}" ]; then
            mkdir -p $(pwd)/${{ env.OUT_DIR }}
            args="$args O=$(pwd)/${{ env.OUT_DIR }}"
          fi
          args="$args ARCH=arm64 LLVM=1 LTO=thin"
          if [ -n "$CROSS_COMPILE" ]; then
            args="$args CROSS_COMPILE=$CROSS_COMPILE"
          fi
          if [ -n "$CROSS_COMPILE_ARM32" ]; then
            args="$args CROSS_COMPILE_ARM32=$CROSS_COMPILE_ARM32"
          fi
          if [ -n "$CROSS_COMPILE_COMPAT" ]; then
            args="$args CROSS_COMPILE_COMPAT=$CROSS_COMPILE_COMPAT"
          fi
          if [ -n "$CLANG_TRIPLE" ]; then
            args="$args CLANG_TRIPLE=$CLANG_TRIPLE"
          fi
          if [ -n "$AR" ]; then
            args="$args AR=$AR"
          fi
          if [ -n "$CC" ]; then
            args="$args CC=$CC"
          fi
          echo "args=$args" >> $GITHUB_OUTPUT

      - name: "üõ† Set localversion name in defconfig"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          LOCALVERSION: ${{ github.event.inputs.localVersion }}
        run: |
          if [ -n "$LOCALVERSION" ]; then
            echo "CONFIG_LOCALVERSION=\"$LOCALVERSION\"" >> arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}
            echo "‚úÖ Set CONFIG_LOCALVERSION to: $LOCALVERSION"
          else
            echo "‚ÑπÔ∏è No localversion specified. Using default."
          fi

      - name: "üòã Update KernelSU"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        if: ${{ github.event.inputs.kernelSUChoice == 'KernelSU' }}
        run: |
          if [ -d "./KernelSU" ]; then
            rm -rf "./KernelSU"
          fi
          if [ -d "./drivers/kernelsu" ]; then
            rm -rf "./drivers/kernelsu"
          fi
          curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -
          cat ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}

      - name: "üòã Update KernelSU-Next"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        if: ${{ github.event.inputs.kernelSUChoice == 'KernelSU-Next' }}
        run: |
          if [ -d "./KernelSU-Next" ]; then
            rm -rf "./KernelSU-Next"
          fi
          if [ -d "./drivers/kernelsu" ]; then
            rm -rf "./drivers/kernelsu"
          fi
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -
          cat ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}

      - name: "üòã Update KernelSU-Next + Next-SuSFS"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        if: ${{ github.event.inputs.kernelSUChoice == 'KernelSU-Next + Next-SuSFS' }}
        run: |
          if [ -d "./KernelSU-Next" ]; then
            rm -rf "./KernelSU-Next"
          fi
          if [ -d "./drivers/kernelsu" ]; then
            rm -rf "./drivers/kernelsu"
          fi
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next-susfs/kernel/setup.sh" | bash -s next-susfs
          mkdir -p fs include/linux
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android13-5.15
          cp ./susfs4ksu/kernel_patches/fs/* ./fs/
          cp ./susfs4ksu/kernel_patches/include/linux/* ./include/linux/
          cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-android13-5.15.patch ./
          patch -p1 < 50_add_susfs_in_gki-android13-5.15.patch || true
          echo "CONFIG_KSU=y" >> ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}
          echo "CONFIG_KSU_SUSFS=y" >> ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=n" >> ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y" >> ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}
          echo "CONFIG_TMPFS_XATTR=y" >> ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}
          cat ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}
          echo "SUSFS_SETUP_DONE=true" >> $GITHUB_ENV

      - name: "üòã Update KernelSU by @rsuntk"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        if: ${{ github.event.inputs.kernelSUChoice == 'KernelSU by @rsuntk' }}
        run: |
          if [ -d "./KernelSU" ]; then
            rm -rf "./KernelSU"
          fi
          if [ -d "./drivers/kernelsu" ]; then
            rm -rf "./drivers/kernelsu"
          fi
          if [ "${{ github.event.inputs.withKernelSUSFS }}" == "true" ]; then
            curl -LSs "https://raw.githubusercontent.com/rsuntk/KernelSU/main/kernel/setup.sh" | bash -s susfs-v1.5.5
            echo "Using KernelSU with SUSFS"
            echo "SUSFS_SETUP_DONE=true" >> $GITHUB_ENV
          else
            curl -LSs "https://raw.githubusercontent.com/rsuntk/KernelSU/main/kernel/setup.sh" | bash -s main
            echo "Using KernelSU without SUSFS"
          fi
          cat ./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}

      - name: "üîç KernelSU check"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          if [ "${{ github.event.inputs.kernelSUChoice }}" == "None" ]; then
            echo "Non-KSU Build"
          else
            echo "KSU Build"
          fi

      - name: "üëç Make defconfig"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          echo "PATH Variable: $PATH"
          make ${{ env.args }} ${{ env.DEFCONFIG_NAME }}

      - name: üòã Setup KSU SUSFS
        if: ${{ github.event.inputs.withKernelSUSFS == 'true' && github.event.inputs.kernelSUChoice != 'None' && env.SUSFS_SETUP_DONE != 'true' }}
        env:
          ARCH: ${{ steps.generate-args.outputs.ARCH }}
          DEFCONFIG: ./${{ env.kernelName }}/arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}
          SFS_BRANCH: ${{ github.event.inputs.susfsBranch }}
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          set -ex
          log() {
            echo "$(date '+%Y-%m-%d %H:%M:%S') - $1"
          }
          check_status() {
            if [ $? -ne 0 ]; then
              log "Error: $1"
              exit 1
            fi
          }
          copy_file() {
            local src="$1"
            local dst="$2"
            local error_msg="$3"
            if [ ! -f "$src" ]; then
              log "Error: Source file $src not found"
              exit 1
            fi
            cp -f "$src" "$dst"
            check_status "$error_msg"
          }
          remove_file() {
            local file="$1"
            local error_msg="$2"
            if [ -f "$file" ]; then
              rm -f "$file"
              check_status "$error_msg"
            fi
          }
          apply_patch() {
            local patch="$1"
            local error_msg="$2"
            log "Attempting to apply patch: $(basename "$patch")"
            if ! patch -p1 < "$patch"; then
              log "Warning: Some hunks failed while applying patch $(basename "$patch")"
            fi
          }
          log "Starting SUSFS setup..."
          log "Cleaning up existing files..."
          remove_file "fs/susfs.c" "Failed to remove existing susfs.c"
          remove_file "include/linux/susfs.h" "Failed to remove existing susfs.h"
          remove_file "fs/sus_su.c" "Failed to remove existing sus_su.c"
          remove_file "include/linux/sus_su.h" "Failed to remove existing sus_su.h"
          log "Creating necessary directories..."
          mkdir -p fs include/linux
          check_status "Failed to create directories"
          if [ -d "./susfs4ksu" ]; then
            rm -rf "./susfs4ksu"
          fi
          log "Cloning SUSFS repository (branch: ${{env.SFS_BRANCH}})..."
          git clone -v https://gitlab.com/simonpunk/susfs4ksu.git -b "${{env.SFS_BRANCH}}" || exit 1
          if [ ! -d "susfs4ksu/kernel_patches" ]; then
            log "Error: kernel_patches directory not found in SUSFS repository"
            ls -la susfs4ksu/
            exit 1
          fi
          log "Copying SUSFS files..."
          if [ -d "susfs4ksu/kernel_patches/fs" ]; then
            cp -rv susfs4ksu/kernel_patches/fs/* fs/
            check_status "Failed to copy fs files"
          fi
          if [ -d "susfs4ksu/kernel_patches/include/linux" ]; then
            cp -rv susfs4ksu/kernel_patches/include/linux/* include/linux/
            check_status "Failed to copy include files"
          fi
          log "Processing patches..."
          find susfs4ksu/kernel_patches -name "*.patch" -type f -exec cp -v {} . \;
          for patch in *.patch; do
            if [ -f "$patch" ]; then
              apply_patch "$patch" "Failed to apply patch: $patch"
            fi
          done
          log "Configuring SUSFS..."
          CONFIG_FILE="./arch/${{ env.ARCH }}/configs/${{ env.DEFCONFIG_NAME }}"
          mkdir -p "$(dirname "$CONFIG_FILE")"
          CONFIGS=(
            "CONFIG_KSU=y"
            "CONFIG_KSU_SUSFS=y"
            "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y"
            "CONFIG_KSU_SUSFS_SUS_PATH=y"
            "CONFIG_KSU_SUSFS_SUS_MOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y"
            "CONFIG_KSU_SUSFS_SUS_KSTAT=n"
            "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=y"
            "CONFIG_KSU_SUSFS_TRY_UMOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y"
            "CONFIG_KSU_SUSFS_SPOOF_UNAME=y"
            "CONFIG_KSU_SUSFS_ENABLE_LOG=y"
            "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y"
            "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y"
            "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y"
            "CONFIG_KSU_SUSFS_SUS_SU=n"
            "CONFIG_TMPFS_XATTR=y"
          )
          for config in "${CONFIGS[@]}"; do
            echo "$config" >> "$CONFIG_FILE"
          done
          log "‚úÖ SUSFS setup completed successfully"
          cat "$CONFIG_FILE"

      - name: "üé∂ Build kernel"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        env:
          args: ${{ steps.generate-args.outputs.args }}
        run: |
          export KBUILD_BUILD_USER="Action"
          export KBUILD_BUILD_HOST="GitHub"
          export CCACHE_DIR="${{ github.workspace }}/.ccache"
          export CCACHE_COMPRESS=1
          export CCACHE_COMPRESSLEVEL=6
          export CCACHE_MAXSIZE=10G
          export CCACHE_CPP2=yes
          ccache -z
          make ${args} \
            CC='ccache clang' \
            AR=llvm-ar \
            AS=llvm-as \
            NM=llvm-nm \
            OBJCOPY=llvm-objcopy \
            OBJDUMP=llvm-objdump \
            STRIP=llvm-strip \
            KBUILD_BUILD_USER="$KBUILD_BUILD_USER" \
            KBUILD_BUILD_HOST="$KBUILD_BUILD_HOST" \
            -j$(nproc --all)

      - name: "üì≤ Pack Kernel with AnyKernel3"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          set -ex
          ANYKERNEL_DIR="anykernel3"
          KERNEL_IMAGE="../${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image"
          if [ -d "$ANYKERNEL_DIR" ]; then
            rm -rf "$ANYKERNEL_DIR"
          fi
          BUILD_DATE=$(date +%m%d%y)
          case "${{ github.event.inputs.kernelSUChoice }}" in
            "None")
              KSU_STRING="vanilla"
              ;;
            "KernelSU")
              KSU_STRING="ksu"
              ;;
            "KernelSU-Next")
              KSU_STRING="ksu-next"
              ;;
            "KernelSU-Next + Next-SuSFS")
              KSU_STRING="ksu-next-susfs"
              ;;
            "KernelSU by @rsuntk")
              if [ "${{ github.event.inputs.withKernelSUSFS }}" == "true" ]; then
                KSU_STRING="ksu-rsuntk-susfs"
              else
                KSU_STRING="ksu-rsuntk"
              fi
              ;;
            *)
              echo "‚ùå Unknown KernelSU choice"
              exit 1
              ;;
          esac
          LOCAL_VER=""
          if [ -n "${{ github.event.inputs.localVersion }}" ]; then
            LOCAL_VER="_${{ github.event.inputs.localVersion }}"
          fi
          ZIPNAME="${{ env.kernelName }}-${KSU_STRING}-thinlto-${BUILD_DATE}${LOCAL_VER}.zip"
          if [ ! -f "$KERNEL_IMAGE" ]; then
            echo "‚ùå Kernel image not found at: $KERNEL_IMAGE"
            exit 1
          fi
          AK3_REPO=$(echo '${{ toJSON(matrix.repos) }}' | jq -r '.anykernel.repo')
          AK3_BRANCH=$(echo '${{ toJSON(matrix.repos) }}' | jq -r '.anykernel.branch')
          git clone --depth 1 "$AK3_REPO" -b "$AK3_BRANCH" "$ANYKERNEL_DIR" || exit 1
          AK3_CONFIGS=$(echo '${{ toJSON(matrix.repos) }}' | jq -r '.anykernel.configs')
          echo "$AK3_CONFIGS" | jq -r 'to_entries | .[] | "\(.key)=\(.value)"' > "$ANYKERNEL_DIR/properties"
          cp "$KERNEL_IMAGE" "$ANYKERNEL_DIR/" || exit 1
          cd "$ANYKERNEL_DIR" || exit 1
          zip -r9 "../$ZIPNAME" * -x .git README.md '*placeholder' "../$ZIPNAME" || exit 1
          if [ ! -f "../$ZIPNAME" ]; then
            echo "‚ùå ZIP package was not created successfully"
            exit 1
          fi
          echo "‚úÖ Kernel package created: $ZIPNAME"

      - name: "üì§ Save ccache Cache"
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.ccache
          key: ${{ runner.os }}-ccache-${{ github.sha }}

      - name: "üìù Set Build Info"
        id: build-info
        run: |
          echo "BUILD_DATE=$(date +%m%d%y)" >> $GITHUB_OUTPUT
          KSU_TYPE="${{ github.event.inputs.kernelSUChoice }}"
          case "$KSU_TYPE" in
            "None")
              echo "KSU_STRING=vanilla" >> $GITHUB_OUTPUT;;
            "KernelSU")
              echo "KSU_STRING=ksu" >> $GITHUB_OUTPUT;;
            "KernelSU-Next")
              echo "KSU_STRING=ksu-next" >> $GITHUB_OUTPUT;;
            "KernelSU-Next + Next-SuSFS")
              echo "KSU_STRING=ksu-next-susfs" >> $GITHUB_OUTPUT;;
            "KernelSU by @rsuntk")
              if [ "${{ github.event.inputs.withKernelSUSFS }}" == "true" ]; then
                echo "KSU_STRING=ksu-rsuntk-susfs" >> $GITHUB_OUTPUT
              else
                echo "KSU_STRING=ksu-rsuntk" >> $GITHUB_OUTPUT
              fi
              ;;
          esac

      - name: "üíõ Upload Raw Image"
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.kernelName }}-${{ steps.build-info.outputs.KSU_STRING }}-thinlto-${{ steps.build-info.outputs.BUILD_DATE }}-raw"
          path: ./${{ env.kernelDir }}/${{ env.OUT_DIR }}/arch/${{ env.ARCH }}/boot/Image
          if-no-files-found: error
          retention-days: 7

      - name: "üîç Debug AnyKernel3 Package"
        working-directory: ./${{ env.kernelDir }}/${{ env.kernelName }}
        run: |
          echo "Current directory: $(pwd)"
          echo "Listing anykernel3 directory:"
          ls -la anykernel3/
          echo "Looking for zip files:"
          find . -name "*.zip" -type f

      - name: "üíõ Upload AnyKernel3 Package"
        uses: actions/upload-artifact@v4
        with:
          name: "${{ env.kernelName }}-${{ steps.build-info.outputs.KSU_STRING }}-thinlto-${{ steps.build-info.outputs.BUILD_DATE }}${{ github.event.inputs.localVersion != '' && format('_{0}', github.event.inputs.localVersion) || '' }}"
          path: ./${{ env.kernelDir }}/${{ env.kernelName }}/*.zip
          if-no-files-found: error
          retention-days: 7